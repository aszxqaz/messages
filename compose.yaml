name: messages
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: messages-zookeeper
    # ports:
    #   - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CONNECTIONS: 60
      ZOOKEEPER_AUTOPURGE_PERIOD: 300000
      KAFKA_OPTS: -Dzookeeper.admin.enableServer=false
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: ERROR
    healthcheck:
      test: [ "CMD-SHELL", "nc -z -w 3 zookeeper 2181" ]
      retries: 1
      start_period: 10s

  broker1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: messages-broker1
    depends_on:
      zookeeper:
        condition: service_healthy
    # ports:
    #   - "29092:29092"
    #   - "9092:9092"
    env_file:
      - "./broker.base.env"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29092,EXTERNAL://broker1:9092
    healthcheck:
      test: [ "CMD-SHELL", "nc -z -w 3 broker1 29092" ]
      retries: 1
      start_period: 10s

  broker2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: messages-broker2
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - "./broker.base.env"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29092, EXTERNAL://broker2:9092

    healthcheck:
      test: [ "CMD-SHELL", "nc -z -w 3 broker2 29092" ]
      retries: 1
      start_period: 10s

  broker3:
    image: confluentinc/cp-kafka:7.3.2
    container_name: messages-broker3
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - "./broker.base.env"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker3:29092, EXTERNAL://broker3:9092

    healthcheck:
      test: [ "CMD-SHELL", "nc -z -w 3 broker3 29092" ]
      retries: 1
      start_period: 10s

  database:
    image: postgres:15
    container_name: messages-database
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./database/schema:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432

  api:
    container_name: messages-api
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      database:
        condition: service_started
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - 4000:4000
    env_file:
      - "./database.base.env"
    environment:
      PORT: 4000
      DB_PASSWORD: postgres
      KAFKA_SERVERS: broker1:9092,broker2:9092,broker3:9092

  consumer:
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      database:
        condition: service_started
    build:
      context: .
      dockerfile: consumer/Dockerfile
    env_file:
      - "./database.base.env"
    environment:
      DB_PASSWORD: postgres
      KAFKA_SERVERS: broker1:9092,broker2:9092,broker3:9092
      CONSUMERS_COUNT: 6

  frontend:
    container_name: messages-frontend
    depends_on:
      - api
    build:
      context: ./frontend
    ports:
      - 3000:3000
    environment:
      - API_BASE_URL=http://api:4000/api/v1
  #
  # # # Optional: Monitoring tools
  #
  # kafdrop:
  #   image: obsidiandynamics/kafdrop:3.31.0
  #   container_name: messages-kafdrop
  #   ports:
  #     - 9000:9000
  #   environment:
  #     KAFKA_BROKERCONNECT: broker1:9092,broker2:9092,broker3:9092
  #   depends_on:
  #     broker1:
  #       condition: service_healthy
  #     broker2:
  #       condition: service_healthy
  #     broker3:
  #       condition: service_healthy
  #
  # pgadmin:
  #   image: dpage/pgadmin4:8.9
  #   container_name: messages-pgadmin4
  #   restart: always
  #   ports:
  #     - 8888:80
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: pgadmin@pgadmin.com
  #     PGADMIN_DEFAULT_PASSWORD: pgadmin
